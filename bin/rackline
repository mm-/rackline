#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'rackline'
require 'cloudservers'
require 'parseconfig'

class App
  include Methadone::Main
  include Methadone::CLILogging
  include Rackline

  main do |server_name|

    # Main authentication block

    rackline_config = ENV['HOME']+"/.rackline"
    if !options[:username].nil? && !options[:api_key].nil?
      un = options[:username]
      ak = options[:api_key]
    elsif File.exists?(rackline_config)
      config_file = ParseConfig.new(rackline_config)
      un = config_file.get_value('username')
      ak = config_file.get_value('api_key')
      if ak.empty? && un.empty?
      help_now!("Config file ~/.rackline read but either username or api_key
                  was empty. Please fix config or use --username
                  and --api_key to specify them on the command line")
      end
    end

    #### Connect
    $cs = CloudServers::Connection.new(:username => "#{un}" , :api_key => "#{ak}")
    #### Connect


    ### --namesearch block

    if options[:namesearch]
      server = ServerFind.new(server_name)

      if options[:namesearch] == "id" 
        server.byname_idonly
      elsif options[:namesearch] == "full" 
        server.byname_fullinfo
      elsif options[:namesearch] == "base"
        server.byname 
      else
        help_now!("--namesearch requires an info level, id, full or base")
      end
    end
    ###   


    ### --reboot block

    if options[:reboot]
      server = $cs.server(server_name)
      
      if options[:reboot] == "hard"
        server.reboot!
      elsif options[:reboot] == "soft"
        server.reboot
      else
        help_now!("--reboot requires a reboot type, either hard or soft")
      end
    end
    ###

    ### --passwd block

    if options[:passwd]
      server = $cs.server(server_name)
      new_password = options[:passwd].to_s
      server.update(:adminPass => new_password)
    end
    ###
      
    ### --changename block

    if options[:changename]
      server = $cs.server(server_name)
      new_name = options[:changename]
      server.update(:name => new_name)
    end
    ###

  end



  version Rackline::VERSION

  description 'CLI control of Rackspace Cloud servers'
  arg :server_name, "Server name or ID"

  on("--username un", "Connect with specified username")
  on("--api_key ak", "Connect with specified api_key")
  on("--namesearch level", "-n level", "Search cloudservers by name. Output Levels: base, id_only, or full_info") 
  on("--reboot type", "-r type", "Reboots specified server ID. Reboot Types: hard, soft")
  on("--passwd new_password", "-p new_password", "Changes root password for specified ID")
  on("--changename new_name", "Changes the server name (not the hostname!) for the specified ID") 
  on("--create", "Creates a new server, requires --imageid and --flavorid")
  on("--imageid image_id", "Sets the Image ID of a new server to be created, used with --create")
  on("--flavorid flavor_id", "Sets the Flavor ID of a new server to be created, used with --create")






#  on("--backups weekly daily", "Enables backups and sets schedule")
  



  use_log_level_option

  go!
end
