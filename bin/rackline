#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'rackline'
require 'cloudservers'
require 'parseconfig'
require 'powerbar'

class App
  include Methadone::Main
  include Methadone::CLILogging
  include Rackline

  main do |server_name|

    # Main authentication block

    rackline_config = ENV['HOME']+"/.rackline"
    if !options[:username].nil? && !options[:api_key].nil?
      un = options[:username]
      ak = options[:api_key]
    elsif File.exists?(rackline_config)
      config_file = ParseConfig.new(rackline_config)
      un = config_file.get_value('username')
      ak = config_file.get_value('api_key')
      if ak.empty? && un.empty?
      help_now!("Config file ~/.rackline read but either username or api_key
                  was empty. Please fix config or use --username
                  and --api_key to specify them on the command line")
      end
    end

    #### Connect
    $cs = CloudServers::Connection.new(:username => "#{un}" , :api_key => "#{ak}")
    #### Connect


    ### --namesearch block

    if options[:namesearch]
      server = ServerFind.new(server_name)

      if options[:namesearch] == "id" 
        server.byname_idonly
      elsif options[:namesearch] == "full" 
        server.byname_fullinfo
      elsif options[:namesearch] == "base"
        server.byname 
      else
        help_now!("--namesearch requires an info level, id, full or base")
      end
    end
    ###   


    ### --reboot block

    if options[:reboot]
      server = $cs.server(server_name)
      
      if options[:reboot] == "hard"
        server.reboot!
      elsif options[:reboot] == "soft"
        server.reboot
      else
        help_now!("--reboot requires a reboot type, either hard or soft")
      end
    end
    ###

    ### --passwd block

    if options[:passwd]
      server = $cs.server(server_name)
      new_password = options[:passwd].to_s
      server.update(:adminPass => new_password)
    end
    ###
      
    ### --changename block

    if options[:changename]
      server = $cs.server(server_name)
      new_name = options[:changename]
      server.update(:name => new_name)
    end
    ###

    ### --list block
    if options[:list]
      arg = server_name
      if arg == "images"
        cs = $cs
        printf "%-60s %s\n\n", "Name", "ID"
        sorted_array = cs.list_images.each.sort_by { |hash| hash[:name] }
        sorted_array.each do |image|
          name = image[:name].to_s
          id = image[:id].to_s
          status = image[:status].to_s
          printf "%-60s %s\n", name, id
        end       
      elsif arg == "flavors"
        cs = $cs
        sorted_arry = cs.list_flavors.each.sort_by { |hash| hash[:id] }
        printf "%-15s %-4s %-6s %s\n\n", "Name", "ID", "RAM", "Disk"
        sorted_arry.each do |flavor|
          name = flavor[:name].to_s
          id = flavor[:id].to_s
          ram = flavor[:ram].to_s
          disk = flavor[:disk].to_s
          printf "%-15s %-4s %-6s %s\n", name, id, ram, disk
       end
      elsif arg == "servers"
        help_now!("--list servers not implemented yet, please use --namesearch")
      else
        help_now!("You must specify either images, flavors, or servers to --list")
      end
    end
    ###

    ### --create block
    if options[:create]
      if !options[:imageid].nil? && !options[:flavorid].nil?
        cs = $cs
        flavor_id = options[:flavorid]
        image_id = options[:imageid]
        image = cs.get_image(image_id)
        flavor = cs.get_flavor(flavor_id)

        puts "\nBuilding new server - " + server_name 
        puts "With Image - " + image.name
        puts "And flavor - " + flavor.name 
        puts
        
        newserver = cs.create_server(:name => server_name, :imageId => image.id, :flavorId => flavor.id)

        ## ProgressBar stuff
        progress = newserver.progress
        p = PowerBar.new
        p.settings.tty.finite.template.barchar = '*'
        p.settings.tty.finite.template.padchar = '.'
        total = 100

        until progress == 100 do 
          newserver.refresh
          progress = newserver.progress
          p.show(:msg => 'Building', :done => progress, :total => total)
          sleep 2
        end

        p.close
        ##

        adminpass = newserver.adminPass
        puts "\nAdmin Pass - " + adminpass
        puts
      else
       help_now!( "You must specify an --imageid and --flavorid with --create")
      end
    end
    ###

    if options[:delete]
      server = $cs.server(server_name)
      puts "Deleting " + server.name
      server.delete!
    end
      
      

  end


  version Rackline::VERSION

  description 'CLI control of Rackspace Cloud servers'
  arg :server_name, "Server name or ID"

  on("--username un", "Connect with specified username")
  on("--api_key ak", "Connect with specified api_key")
  on("--namesearch level", "-n level", "Search cloudservers by name. Output Levels: base, id_only, or full_info") 
  on("--reboot type", "-r type", "Reboots specified server ID. Reboot Types: hard, soft")
  on("--passwd new_password", "-p new_password", "Changes root password for specified ID")
  on("--changename new_name", "Changes the server name (not the hostname!) for the specified ID") 
  on("--delete", "Deletes the specified Server ID")
  on("--create", "Creates a new server, requires --imageid and --flavorid")
  on("--imageid image_id", "Sets the Image ID of a new server to be created, used with --create")
  on("--flavorid flavor_id", "Sets the Flavor ID of a new server to be created, used with --create")
  on("--list", "Lists all images, flavors, or servers, specify with --list-all images/servers/flavors")
  


  use_log_level_option

  go!
end
